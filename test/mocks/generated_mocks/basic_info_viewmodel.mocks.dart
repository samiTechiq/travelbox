// Mocks generated by Mockito 5.4.0 from annotations
// in travelbox/test/demo_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:ui' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:travelbox/features/questions/views/basic_info/usecase/basic_info_usecase.dart'
    as _i2;
import 'package:travelbox/features/questions/views/basic_info/viewmodel/basic_info_viewmodel.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRegisterRequest_0 extends _i1.SmartFake
    implements _i2.RegisterRequest {
  _FakeRegisterRequest_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BasicInfoViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockBasicInfoViewModel extends _i1.Mock
    implements _i3.BasicInfoViewModel {
  MockBasicInfoViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set title(String? _title) => super.noSuchMethod(
        Invocation.setter(
          #title,
          _title,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set firstName(String? _firstName) => super.noSuchMethod(
        Invocation.setter(
          #firstName,
          _firstName,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set surname(String? _surname) => super.noSuchMethod(
        Invocation.setter(
          #surname,
          _surname,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set email(String? _email) => super.noSuchMethod(
        Invocation.setter(
          #email,
          _email,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set mobile(String? _mobile) => super.noSuchMethod(
        Invocation.setter(
          #mobile,
          _mobile,
        ),
        returnValueForMissingStub: null,
      );

  set password(String? _password) => super.noSuchMethod(
        Invocation.setter(
          #password,
          _password,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set phoneNumberError(String? _phoneNumberError) => super.noSuchMethod(
        Invocation.setter(
          #phoneNumberError,
          _phoneNumberError,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get acceptPolicy => (super.noSuchMethod(
        Invocation.getter(#acceptPolicy),
        returnValue: false,
      ) as bool);

  @override
  set acceptPolicy(bool? _acceptPolicy) => super.noSuchMethod(
        Invocation.setter(
          #acceptPolicy,
          _acceptPolicy,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.RegisterRequest get params => (super.noSuchMethod(
        Invocation.getter(#params),
        returnValue: _FakeRegisterRequest_0(
          this,
          Invocation.getter(#params),
        ),
      ) as _i2.RegisterRequest);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void setTitle(String? value) => super.noSuchMethod(
        Invocation.method(
          #setTitle,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void toggleAcceptPolicy() => super.noSuchMethod(
        Invocation.method(
          #toggleAcceptPolicy,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setPhoneNumberError(String? value) => super.noSuchMethod(
        Invocation.method(
          #setPhoneNumberError,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool isButtonEnabled() => (super.noSuchMethod(
        Invocation.method(
          #isButtonEnabled,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  void setFirstName(String? value) => super.noSuchMethod(
        Invocation.method(
          #setFirstName,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setSurname(String? value) => super.noSuchMethod(
        Invocation.method(
          #setSurname,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setEmail(String? value) => super.noSuchMethod(
        Invocation.method(
          #setEmail,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setMobile(String? value) => super.noSuchMethod(
        Invocation.method(
          #setMobile,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setPassword(String? value) => super.noSuchMethod(
        Invocation.method(
          #setPassword,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void userRegister() => super.noSuchMethod(
        Invocation.method(
          #userRegister,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i4.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i4.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
