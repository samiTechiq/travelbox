// Mocks generated by Mockito 5.4.4 from annotations
// in travelbox/test/demo_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:ui' as _i8;

import 'package:mockito/mockito.dart' as _i1;
import 'package:travelbox/features/cover_quote/model/country_data.dart' as _i4;
import 'package:travelbox/features/cover_quote/model/cover.dart' as _i5;
import 'package:travelbox/features/cover_quote/usecase/cover_usecase.dart'
    as _i2;
import 'package:travelbox/features/cover_quote/usecase/get_counties_usecase.dart'
    as _i3;
import 'package:travelbox/features/cover_quote/viewmodel/cover_quote_viewmodel.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetCoverQuoteUseCase_0 extends _i1.SmartFake
    implements _i2.GetCoverQuoteUseCase {
  _FakeGetCoverQuoteUseCase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetCountriesUsecase_1 extends _i1.SmartFake
    implements _i3.GetCountriesUsecase {
  _FakeGetCountriesUsecase_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCountryData_2 extends _i1.SmartFake implements _i4.CountryData {
  _FakeCountryData_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCover_3 extends _i1.SmartFake implements _i5.Cover {
  _FakeCover_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CoverQuoteViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockCoverQuoteViewModel extends _i1.Mock
    implements _i6.CoverQuoteViewModel {
  MockCoverQuoteViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetCoverQuoteUseCase get getCoverQuoteUseCase => (super.noSuchMethod(
        Invocation.getter(#getCoverQuoteUseCase),
        returnValue: _FakeGetCoverQuoteUseCase_0(
          this,
          Invocation.getter(#getCoverQuoteUseCase),
        ),
      ) as _i2.GetCoverQuoteUseCase);

  @override
  _i3.GetCountriesUsecase get getCountriesUseCase => (super.noSuchMethod(
        Invocation.getter(#getCountriesUseCase),
        returnValue: _FakeGetCountriesUsecase_1(
          this,
          Invocation.getter(#getCountriesUseCase),
        ),
      ) as _i3.GetCountriesUsecase);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  set isLoading(bool? _isLoading) => super.noSuchMethod(
        Invocation.setter(
          #isLoading,
          _isLoading,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.CountryData get selectedCountry => (super.noSuchMethod(
        Invocation.getter(#selectedCountry),
        returnValue: _FakeCountryData_2(
          this,
          Invocation.getter(#selectedCountry),
        ),
      ) as _i4.CountryData);

  @override
  set selectedCountry(_i4.CountryData? _selectedCountry) => super.noSuchMethod(
        Invocation.setter(
          #selectedCountry,
          _selectedCountry,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.AvailableCoversTimeFrame get timeframeSelected => (super.noSuchMethod(
        Invocation.getter(#timeframeSelected),
        returnValue: _i6.AvailableCoversTimeFrame.annual,
      ) as _i6.AvailableCoversTimeFrame);

  @override
  set timeframeSelected(_i6.AvailableCoversTimeFrame? _timeframeSelected) =>
      super.noSuchMethod(
        Invocation.setter(
          #timeframeSelected,
          _timeframeSelected,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isSingleTripSelected => (super.noSuchMethod(
        Invocation.getter(#isSingleTripSelected),
        returnValue: false,
      ) as bool);

  @override
  set isSingleTripSelected(bool? _isSingleTripSelected) => super.noSuchMethod(
        Invocation.setter(
          #isSingleTripSelected,
          _isSingleTripSelected,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Cover get selectedCover => (super.noSuchMethod(
        Invocation.getter(#selectedCover),
        returnValue: _FakeCover_3(
          this,
          Invocation.getter(#selectedCover),
        ),
      ) as _i5.Cover);

  @override
  set selectedCover(_i5.Cover? _selectedCover) => super.noSuchMethod(
        Invocation.setter(
          #selectedCover,
          _selectedCover,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i5.AvailableCoverItems> get selectedCheckBox => (super.noSuchMethod(
        Invocation.getter(#selectedCheckBox),
        returnValue: <_i5.AvailableCoverItems>[],
      ) as List<_i5.AvailableCoverItems>);

  @override
  set selectedCheckBox(List<_i5.AvailableCoverItems>? _selectedCheckBox) =>
      super.noSuchMethod(
        Invocation.setter(
          #selectedCheckBox,
          _selectedCheckBox,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set destinationToCover(String? _destinationToCover) => super.noSuchMethod(
        Invocation.setter(
          #destinationToCover,
          _destinationToCover,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.DestinationRegionAnnual get destinationRegionAnnual =>
      (super.noSuchMethod(
        Invocation.getter(#destinationRegionAnnual),
        returnValue: _i6.DestinationRegionAnnual.asia,
      ) as _i6.DestinationRegionAnnual);

  @override
  set destinationRegionAnnual(
          _i6.DestinationRegionAnnual? _destinationRegionAnnual) =>
      super.noSuchMethod(
        Invocation.setter(
          #destinationRegionAnnual,
          _destinationRegionAnnual,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i5.Cover> get coverList => (super.noSuchMethod(
        Invocation.getter(#coverList),
        returnValue: <_i5.Cover>[],
      ) as List<_i5.Cover>);

  @override
  List<_i4.CountryData> get countryList => (super.noSuchMethod(
        Invocation.getter(#countryList),
        returnValue: <_i4.CountryData>[],
      ) as List<_i4.CountryData>);

  @override
  List<Map<String, dynamic>> get countries => (super.noSuchMethod(
        Invocation.getter(#countries),
        returnValue: <Map<String, dynamic>>[],
      ) as List<Map<String, dynamic>>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i7.Future<List<Map<String, dynamic>>> loadCountriesJson() =>
      (super.noSuchMethod(
        Invocation.method(
          #loadCountriesJson,
          [],
        ),
        returnValue: _i7.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i7.Future<List<Map<String, dynamic>>>);

  @override
  void getCoverQuote(
    String? language,
    String? country,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #getCoverQuote,
          [
            language,
            country,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void getCountries(
    String? language,
    String? country,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #getCountries,
          [
            language,
            country,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic setDestinationRegionAnnual(_i6.DestinationRegionAnnual? region) =>
      super.noSuchMethod(Invocation.method(
        #setDestinationRegionAnnual,
        [region],
      ));

  @override
  dynamic setCover(_i5.Cover? cover) => super.noSuchMethod(Invocation.method(
        #setCover,
        [cover],
      ));

  @override
  dynamic setCountry(_i4.CountryData? data) =>
      super.noSuchMethod(Invocation.method(
        #setCountry,
        [data],
      ));

  @override
  dynamic setCheckBox(_i5.AvailableCoverItems? checkBox) =>
      super.noSuchMethod(Invocation.method(
        #setCheckBox,
        [checkBox],
      ));

  @override
  dynamic setDestination(String? destination) =>
      super.noSuchMethod(Invocation.method(
        #setDestination,
        [destination],
      ));

  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
