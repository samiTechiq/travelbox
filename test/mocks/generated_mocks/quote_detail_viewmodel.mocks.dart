// Mocks generated by Mockito 5.4.0 from annotations
// in travelbox/test/demo_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:ui' as _i7;

import 'package:mockito/mockito.dart' as _i1;
import 'package:travelbox/features/questions/model/quote_model.dart' as _i5;
import 'package:travelbox/features/quote_details/model/order_model.dart' as _i3;
import 'package:travelbox/features/quote_details/usecase/order_usecase.dart'
as _i2;
import 'package:travelbox/features/quote_details/viewmodel/quote_detail_viewmodel.dart'
as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetOrderUsecase_0 extends _i1.SmartFake
    implements _i2.GetOrderUsecase {
  _FakeGetOrderUsecase_0(
      Object parent,
      Invocation parentInvocation,
      ) : super(
    parent,
    parentInvocation,
  );
}

class _FakeOrderModel_1 extends _i1.SmartFake implements _i3.OrderModel {
  _FakeOrderModel_1(
      Object parent,
      Invocation parentInvocation,
      ) : super(
    parent,
    parentInvocation,
  );
}

/// A class which mocks [QuoteDetailViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuoteDetailViewModel extends _i1.Mock
    implements _i4.QuoteDetailViewModel {
  MockQuoteDetailViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetOrderUsecase get getOrderUsecase => (super.noSuchMethod(
    Invocation.getter(#getOrderUsecase),
    returnValue: _FakeGetOrderUsecase_0(
      this,
      Invocation.getter(#getOrderUsecase),
    ),
  ) as _i2.GetOrderUsecase);
  @override
  double get totalPrice => (super.noSuchMethod(
    Invocation.getter(#totalPrice),
    returnValue: 0.0,
  ) as double);
  @override
  set totalPrice(double? _totalPrice) => super.noSuchMethod(
    Invocation.setter(
      #totalPrice,
      _totalPrice,
    ),
    returnValueForMissingStub: null,
  );
  @override
  set currency(String? _currency) => super.noSuchMethod(
    Invocation.setter(
      #currency,
      _currency,
    ),
    returnValueForMissingStub: null,
  );
  @override
  _i3.OrderModel get order => (super.noSuchMethod(
    Invocation.getter(#order),
    returnValue: _FakeOrderModel_1(
      this,
      Invocation.getter(#order),
    ),
  ) as _i3.OrderModel);
  @override
  set order(_i3.OrderModel? _order) => super.noSuchMethod(
    Invocation.setter(
      #order,
      _order,
    ),
    returnValueForMissingStub: null,
  );
  @override
  set selectedQuote(_i5.Quote? _selectedQuote) => super.noSuchMethod(
    Invocation.setter(
      #selectedQuote,
      _selectedQuote,
    ),
    returnValueForMissingStub: null,
  );
  @override
  bool get hasListeners => (super.noSuchMethod(
    Invocation.getter(#hasListeners),
    returnValue: false,
  ) as bool);
  @override
  void setQuote(_i5.Quote? val) => super.noSuchMethod(
    Invocation.method(
      #setQuote,
      [val],
    ),
    returnValueForMissingStub: null,
  );
  @override
  void addToPrice(double? value) => super.noSuchMethod(
    Invocation.method(
      #addToPrice,
      [value],
    ),
    returnValueForMissingStub: null,
  );
  @override
  _i6.Future<_i3.OrderModel?> getOrder() => (super.noSuchMethod(
    Invocation.method(
      #getOrder,
      [],
    ),
    returnValue: _i6.Future<_i3.OrderModel?>.value(),
  ) as _i6.Future<_i3.OrderModel?>);
  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(
      #addListener,
      [listener],
    ),
    returnValueForMissingStub: null,
  );
  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(
      #removeListener,
      [listener],
    ),
    returnValueForMissingStub: null,
  );
  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(
      #dispose,
      [],
    ),
    returnValueForMissingStub: null,
  );
  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(
      #notifyListeners,
      [],
    ),
    returnValueForMissingStub: null,
  );
}
