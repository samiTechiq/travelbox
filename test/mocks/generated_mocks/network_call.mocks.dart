// Mocks generated by Mockito 5.4.0 from annotations
// in travelbox/test/demo_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dio/dio.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:travelbox/utils/core/network_calls/wrapper/dio_wrapper/network_call_wrapper.dart'
as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponse_0<T> extends _i1.SmartFake implements _i2.Response<T> {
  _FakeResponse_0(
      Object parent,
      Invocation parentInvocation,
      ) : super(
    parent,
    parentInvocation,
  );
}

/// A class which mocks [NetworkCallsWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkCallsWrapper extends _i1.Mock
    implements _i3.NetworkCallsWrapper {
  MockNetworkCallsWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Response<dynamic>> onPost({
    required String? api,
    required dynamic data,
    Map<String, dynamic>? queryParameters,
    Map<String, dynamic>? headers,
    String? jwt,
    String? baseUrl,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #onPost,
          [],
          {
            #api: api,
            #data: data,
            #queryParameters: queryParameters,
            #headers: headers,
            #jwt: jwt,
            #baseUrl: baseUrl,
          },
        ),
        returnValue:
        _i4.Future<_i2.Response<dynamic>>.value(_FakeResponse_0<dynamic>(
          this,
          Invocation.method(
            #onPost,
            [],
            {
              #api: api,
              #data: data,
              #queryParameters: queryParameters,
              #headers: headers,
              #jwt: jwt,
              #baseUrl: baseUrl,
            },
          ),
        )),
      ) as _i4.Future<_i2.Response<dynamic>>);
  @override
  _i4.Future<_i2.Response<dynamic>> onGet({
    required String? api,
    Map<String, dynamic>? queryParameters,
    Map<String, dynamic>? headers,
    String? jwt,
    String? baseUrl,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #onGet,
          [],
          {
            #api: api,
            #queryParameters: queryParameters,
            #headers: headers,
            #jwt: jwt,
            #baseUrl: baseUrl,
          },
        ),
        returnValue:
        _i4.Future<_i2.Response<dynamic>>.value(_FakeResponse_0<dynamic>(
          this,
          Invocation.method(
            #onGet,
            [],
            {
              #api: api,
              #queryParameters: queryParameters,
              #headers: headers,
              #jwt: jwt,
              #baseUrl: baseUrl,
            },
          ),
        )),
      ) as _i4.Future<_i2.Response<dynamic>>);
  @override
  void resolveAPIMetadata({
    Map<String, dynamic>? queryParameters,
    Map<String, dynamic>? headers,
    String? jwt,
    String? baseUrl,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #resolveAPIMetadata,
          [],
          {
            #queryParameters: queryParameters,
            #headers: headers,
            #jwt: jwt,
            #baseUrl: baseUrl,
          },
        ),
        returnValueForMissingStub: null,
      );
}
