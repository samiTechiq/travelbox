// Mocks generated by Mockito 5.4.1 from annotations
// in travelbox/test/demo_test.dart.
// Do not manually edit this file.

// @dart=2.19

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:ui' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:travelbox/features/questions/views/attending_customer/model/attending_customer_data.dart'
as _i3;
import 'package:travelbox/features/questions/views/attending_customer/viewmodel/attending_customer_viewmodel.dart'
as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AttendingCustomerViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockAttendingCustomerViewModel extends _i1.Mock
    implements _i2.AttendingCustomerViewModel {
  MockAttendingCustomerViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get attendingCustomer => (super.noSuchMethod(
    Invocation.getter(#attendingCustomer),
    returnValue: '',
  ) as String);
  @override
  _i2.TravelingPartner get travelingPartner => (super.noSuchMethod(
    Invocation.getter(#travelingPartner),
    returnValue: _i2.TravelingPartner.one,
  ) as _i2.TravelingPartner);
  @override
  bool get hasListeners => (super.noSuchMethod(
    Invocation.getter(#hasListeners),
    returnValue: false,
  ) as bool);
  @override
  void toggleSelectedAttendee(
      _i3.AttendingCustomerDataModel? data,
      List<_i3.AttendingCustomerDataModel>? list,
      ) =>
      super.noSuchMethod(
        Invocation.method(
          #toggleSelectedAttendee,
          [
            data,
            list,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addListener(_i4.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(
      #addListener,
      [listener],
    ),
    returnValueForMissingStub: null,
  );
  @override
  void removeListener(_i4.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(
      #removeListener,
      [listener],
    ),
    returnValueForMissingStub: null,
  );
  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(
      #dispose,
      [],
    ),
    returnValueForMissingStub: null,
  );
  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(
      #notifyListeners,
      [],
    ),
    returnValueForMissingStub: null,
  );
}
